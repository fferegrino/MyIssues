// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using MyIssues.DataAccess;
using MyIssues.Models;
using UIKit;

namespace MyIssues2.iOS
{
	public partial class CommentsViewController : UIViewController, 
							IUITableViewDelegate,
							IUITableViewDataSource,
							IShouldUpdate
	{
		public CommentsViewController (IntPtr handle) : base (handle)
		{
		}

		struct StoryboardId
		{
			public const string CommentViewCellIdentifier = "Comment View Cell";
			public const string ReplyToIssueSegue = "Reply To Issue";
		}

		Storage _storage;
		int _issueNumber;

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			TableView.AllowsSelection = false;

			TableView.RowHeight = UITableView.AutomaticDimension;
			TableView.EstimatedRowHeight = 50;

			var controller = TabBarController as IssueTabBarViewController;
			_issueNumber = controller.IssueNumber;
			_storage = Storage.GetInstance();

			var loadComments = _storage.GetIssueComments(_issueNumber);

			loadComments.Subscribe(CargaComentarios);

			TableView.DataSource = this;
			TableView.Delegate = this;
		}

		IReadOnlyList<IssueComment> _comments;

		public void UpdateFeed()
		{
			var loadComments = _storage.GetIssueComments(_issueNumber);

			loadComments.Subscribe(CargaComentarios);
		}

		void CargaComentarios(IReadOnlyList<IssueComment> comments)
		{
			_comments = comments;
			InvokeOnMainThread(() =>
			{
				TableView.ReloadData();
			});
		}

		public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			var cell = TableView.DequeueReusableCell(StoryboardId.CommentViewCellIdentifier, indexPath) as CommentViewCell;

			if (cell != null)
			{
				var comment = _comments[indexPath.Row];
				cell.SetComment(comment);

			}

			return cell;
		}

		public nint RowsInSection(UITableView tableView, nint section)
		{
			return _comments?.Count ?? 0;
		}


		partial void ReplyToIssueTapped(UIButton sender)
		{
			PerformSegue(StoryboardId.ReplyToIssueSegue, this);
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (segue.Identifier.Equals(StoryboardId.ReplyToIssueSegue))
			{
				var vc = segue.DestinationViewController as ReplyToIssueViewController;
				vc.Delegate = this;
				vc.SetIssueNumber(_issueNumber);
			}
			else 
			{
				base.PrepareForSegue(segue, sender);
			}
		}

	}

	internal interface IShouldUpdate
	{
		void UpdateFeed(); 
	}
}
