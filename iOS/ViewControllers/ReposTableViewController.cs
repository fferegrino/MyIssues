// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using Foundation;
using System.Collections.Generic;
using MyIssues.DataAccess;
using UIKit;
using MyIssues2.iOS.Cells;

namespace MyIssues2.iOS
{
	public partial class ReposTableViewController : UITableViewController, IUISearchBarDelegate
	{
		public ReposTableViewController (IntPtr handle) : base (handle)
		{
		}
		Storage _storage;
		List<MyIssues.Models.Repository> _original;

		List<MyIssues.Models.Repository> _shown;

		public override async void ViewDidLoad()
		{
			base.ViewDidLoad();
			_storage = Storage.GetInstance();
			_original = await _storage.GetRepositoriesForUser();
			_shown = _original;
			TableView.ReloadData();

			SearchBar.Delegate = this;
		}

		struct StoryboardId
		{
			public const string RepoCellIdentifier = "Repo Cell";
			public const string ReturnToIssuesSegue = "Return To Issues";
		}

		#region Table stuff
		public override nint NumberOfSections(UITableView tableView)
		{
			return 1;
		}

		public override nint RowsInSection(UITableView tableView, nint section)
		{
			return _shown?.Count ?? 0;
		}


		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			var cell = TableView.DequeueReusableCell(StoryboardId.RepoCellIdentifier, indexPath) as RepoViewCell;

			if (cell != null)
			{
				var repo = _shown[indexPath.Row];
				cell.SetRepo(repo);

			}

			return cell;
		}

		long _repoId;
		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			_repoId = _shown[indexPath.Row].Id;
			this.PerformSegue(StoryboardId.ReturnToIssuesSegue, tableView);

		}
		#endregion


		#region Segues

		public override bool ShouldPerformSegue(string segueIdentifier, NSObject sender)
		{
			if (StoryboardId.ReturnToIssuesSegue.Equals(segueIdentifier))
			{
				return _repoId != 0;
			}
			return base.ShouldPerformSegue(segueIdentifier, sender);
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (StoryboardId.ReturnToIssuesSegue.Equals(segue.Identifier))
			{
				var mdtvc = segue.DestinationViewController.ContentViewController() as IssuesTableViewController;
				mdtvc.RepoId = _repoId;
			}
			else
			{
				base.PrepareForSegue(segue, sender);
			}
		}

		#endregion

		#region Searchbar
		[Export("searchBar:textDidChange:")]
		public void TextChanged(UISearchBar searchBar, string searchText)
		{
			System.Diagnostics.Debug.WriteLine($"{searchText}");
			_shown = _original.Where(r => r.Name.StartsWith(searchText)).ToList();
			TableView.ReloadData();
		}

		[Export("searchBarSearchButtonClicked:")]
		public async void SearchButtonClicked(UISearchBar searchBar)
		{
			UIApplication.SharedApplication.NetworkActivityIndicatorVisible = true;
			_shown = await _storage.SearchRepositories(searchBar.Text);
			TableView.ReloadData();

			UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
			System.Diagnostics.Debug.WriteLine($"{searchBar.Text}");
		}

		#endregion
	}
}
