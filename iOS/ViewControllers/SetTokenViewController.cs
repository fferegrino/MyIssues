// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using Foundation;
using MyIssues;
using MyIssues.DataAccess;
using UIKit;

namespace MyIssues2.iOS
{
	public partial class SetTokenViewController : UIViewController, IUITextViewDelegate
	{
		public SetTokenViewController (IntPtr handle) : base (handle)
		{
		}

		struct StoryboardId
		{
			public const string ViewIssuesSegue = "View Issues";
		}

		Storage _storage;
		public override async void ViewDidLoad()
		{
			base.ViewDidLoad();


			_storage = MyIssues.DataAccess.Storage.GetInstance();
			string accessToken = await _storage.GetToken();// ?? "3282fb0f86f8063f8c8dfb1e3f0df2b839f1f298";

			TokenTextView.AttributedText = StyleToken(accessToken);

			TokenTextView.Delegate = this;
			if (accessToken != null && await Authenticate(accessToken))
			{
				PerformSegue(StoryboardId.ViewIssuesSegue, this);
			}
			else
			{
				System.Diagnostics.Debug.WriteLine("Not authed");
			}
		}

		[Export("textView:shouldChangeTextInRange:replacementText:")]
		public bool ShouldChangeText(UITextView textView, NSRange range, string text)
		{
			System.Diagnostics.Debug.Write(text);
			TokenTextView.AttributedText = StyleToken(TokenTextView.Text);
			if (text == "\n")
			{
				TryAuth();
				return false;
			}
			return true;
		}

		NSAttributedString StyleToken(string token)
		{
			return new NSAttributedString(TokenTextView.Text,
			                              kerning: 7, 
			                              font: UIFont.PreferredTitle2);
		}

		partial void LearnMoreClick(NSObject sender)
		{
			UIApplication.SharedApplication.OpenUrl(new Uri("http://thatcsharpguy.com/apps/myissues#personal-access-token"));
		}


		async partial void ContinueButton(NSObject sender)
		{
			await TryAuth();
		}


		async Task TryAuth()
		{
			if (TokenTextView.Text != null && await Authenticate(TokenTextView.Text))
			{
				PerformSegue(StoryboardId.ViewIssuesSegue, this);
			}
			else
			{
				System.Diagnostics.Debug.WriteLine("Not authed");
			}
		}

		async Task<bool> Authenticate(string accessToken)
		{
			ActivityIndicator.StartAnimating();
			//ProgressDialog progress;
			//progress = ProgressDialog.Show(this, Resources.GetString(Resource.String.Authenticating),
			//							   Resources.GetString(Resource.String.PleaseWait), true);
			var cliente = GitHubClientFactory.CreateClient(accessToken);
			var authed = await _storage.SetClient(cliente);

			System.Diagnostics.Debug.WriteLine("Authenticate");
			if (authed)
			{
				await _storage.SaveToken(accessToken);
			}

			ActivityIndicator.StopAnimating();
			return authed;
		}
	}
}
