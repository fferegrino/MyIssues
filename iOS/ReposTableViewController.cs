// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using System.Collections.Generic;
using MyIssues.DataAccess;
using UIKit;

namespace MyIssues2.iOS
{
	public partial class ReposTableViewController : UITableViewController
	{
		public ReposTableViewController (IntPtr handle) : base (handle)
		{
		}
		Storage _storage;
		List<MyIssues.Models.Repository> _repos;

		public override async void ViewDidLoad()
		{
			base.ViewDidLoad();
			_storage = Storage.GetInstance();
			_repos = await _storage.GetRepositoriesForUser();
			TableView.ReloadData();
		}

		struct StoryboardId
		{
			public const string RepoCellIdentifier = "Repo Cell";
			public const string ReturnToIssuesSegue = "Return To Issues";
		}

		#region Table stuff
		public override nint NumberOfSections(UITableView tableView)
		{
			return 1;
		}

		public override nint RowsInSection(UITableView tableView, nint section)
		{
			return _repos?.Count ?? 0;
		}


		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			var cell = TableView.DequeueReusableCell(StoryboardId.RepoCellIdentifier, indexPath);

			if (cell != null)
			{
				cell.TextLabel.Text = _repos[indexPath.Row].Name;
			}

			return cell;
		}

		long _repoId;
		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			_repoId = _repos[indexPath.Row].Id;
			this.PerformSegue(StoryboardId.ReturnToIssuesSegue, tableView);

		}


		public override bool ShouldPerformSegue(string segueIdentifier, NSObject sender)
		{
			if (StoryboardId.ReturnToIssuesSegue.Equals(segueIdentifier))
			{
				return _repoId != 0;
			}
			return base.ShouldPerformSegue(segueIdentifier, sender);
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (StoryboardId.ReturnToIssuesSegue.Equals(segue.Identifier))
			{
				var mdtvc = segue.DestinationViewController.ContentViewController() as IssuesTableViewController;
				mdtvc.RepoId = _repoId;
			}
			else
			{
				base.PrepareForSegue(segue, sender);
			}
		}
		#endregion
	}
}
